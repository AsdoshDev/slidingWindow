//readable solution using obj{}

function findLongestSubstring(s) {
  let i= 0;
  let j = 0;
  let count = 0;
  let n = s.length;
  let set = {};
  while(i < n && j < n){
    let char  = s.charAt(j);
    if(!set[char]){
        set[char] = 1;
        j++;
        count = Math.max(count,j-i);
    }
    else{
      delete set[s.charAt(i)];
      i++;
    }
  }
  return count;
}

// readable solution using Set()

function findLongestSubstring(s) {
  let i= 0;
  let j = 0;
  let count = 0;
  let n = s.length;
  let set = new Set();
  while(i < n && j < n){
    let char  = s.charAt(j);
    console.log(set.entries());
    if(!set.has(char)){
        set.add(char);
        j++;
        count = Math.max(count,j-i);
    }
    else{
      set.delete(s.charAt(i));
      i++;
    }
  }
  return count;
}

// more efficient solution


function findLongestSubstring(str) {
  let longest = 0;
  let seen = {};
  let start = 0;
 
  for (let i = 0; i < str.length; i++) {
    let char = str[i];
    if (seen[char]) {
      start = Math.max(start, seen[char]);
    }
    // index - beginning of substring + 1 (to include current in count)
    longest = Math.max(longest, i - start + 1);
    // store the index of the next char so as to not double count
    seen[char] = i + 1;
  }
  return longest;
}


